plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id("dev.architectury.loom")
    id("architectury-plugin")
    id("org.jetbrains.kotlin.jvm")
}

architectury {
    platformSetupLoomIde()
    forge()
}

archivesBaseName = rootProject.archives_base_name + "-forge"

loom {
    silentMojangMappingsLicense()
    enableTransitiveAccessWideners = true
    //accessWidenerPath = project(":common").loom.accessWidenerPath
//
    //forge {
    //    convertAccessWideners = true
    //    extraAccessWideners.add loom.accessWidenerPath.get().asFile.name
    //}
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {

    minecraft("com.mojang:minecraft:${rootProject.minecraft_version}")
    mappings("net.fabricmc:yarn:1.20.1+build.10:v2")
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    modImplementation("curse.maven:cobblemon-687131:4797468")

    forgeRuntimeLibrary("net.kyori:adventure-text-minimessage:${property("minimessage_version")}")
    forgeRuntimeLibrary("net.kyori:adventure-text-serializer-gson:${property("minimessage_version")}")
    shadowCommon("net.kyori:adventure-text-minimessage:${property("minimessage_version")}")
    shadowCommon("net.kyori:adventure-text-serializer-gson:${property("minimessage_version")}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    exclude "com/**/*"
    exclude "com.*"

    relocate "net.kyori", "tech.sethi.pebbles"
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}